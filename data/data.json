{
  "users": [
    {
      "name": "eli",
      "progress": {}
    }
  ],
  "studysets": [
    {
      "id": "91ebe048-5253-415d-8f18-f39e3a68241c",
      "status": "ready",
      "prompt": "I would like to learn the following python concepts: comments, printing, variables, math operators, if/else, and functions",
      "title": "Python crash: basics",
      "topics": [
        {
          "title": "Python basics",
          "sections": [
            "Comments",
            "Printing",
            "Variables",
            "Math operators",
            "If/Else",
            "Functions"
          ]
        }
      ],
      "question": [
        {
          "id": 19,
          "title": "Comment syntax",
          "author": "py_snack",
          "author_pfp_emoji": "üêç",
          "topic": 0,
          "section": 0,
          "likes": 92,
          "background": "linear-gradient(135deg, #f6d365 0%, #fda085 100%)",
          "comments": [
            {
              "id": 20,
              "author": "code_bae",
              "pfp_emoji": "üíª",
              "likes": 14,
              "content": "Single-line comments start with # ‚Äî easy peasy."
            },
            {
              "id": 21,
              "author": "meme_logic",
              "pfp_emoji": "ü§°",
              "likes": 3,
              "content": "Multiline string ‚â† comment if you're actually using it as a value lol"
            },
            {
              "id": 22,
              "author": "docqueen",
              "pfp_emoji": "üìö",
              "likes": 7,
              "content": "Use triple quotes for docstrings (they're real objects) and # for notes."
            }
          ],
          "question": "Which of these is a proper single-line comment in Python?",
          "choices": [
            "/* comment */",
            "<!-- comment -->",
            "# comment",
            "'' 'comment' ''"
          ],
          "correct_idx": 2
        },
        {
          "id": 23,
          "title": "Print output",
          "author": "printly",
          "author_pfp_emoji": "üñ®Ô∏è",
          "topic": 0,
          "section": 1,
          "likes": 143,
          "background": "linear-gradient(135deg, #89f7fe 0%, #66a6ff 100%)",
          "comments": [
            {
              "id": 24,
              "author": "fmt_king",
              "pfp_emoji": "üéØ",
              "likes": 21,
              "content": "f-strings >>> old style. Pretty and fast."
            },
            {
              "id": 25,
              "author": "newb_alert",
              "pfp_emoji": "üôã‚Äç‚ôÇÔ∏è",
              "likes": 5,
              "content": "Wait is print a function or statement? (it's a function in Py3)"
            },
            {
              "id": 26,
              "author": "sarcastic_sam",
              "pfp_emoji": "ü¶ñ",
              "likes": 2,
              "content": "print('hello world') ‚Äî the OG flex."
            }
          ],
          "question": "What will print(f\"{2+3} apples\") output?",
          "choices": [
            "2+3 apples",
            "5 apples",
            "{2+3} apples",
            "Error"
          ],
          "correct_idx": 1
        },
        {
          "id": 27,
          "title": "Variables and assignment",
          "author": "assign_master",
          "author_pfp_emoji": "üîÅ",
          "topic": 0,
          "section": 2,
          "likes": 67,
          "background": "linear-gradient(135deg, #cfd9df 0%, #e2ebf0 100%)",
          "comments": [
            {
              "id": 28,
              "author": "mutable_mel",
              "pfp_emoji": "üß†",
              "likes": 9,
              "content": "Variables are labels, not boxes that hold things physically."
            },
            {
              "id": 29,
              "author": "typo_trek",
              "pfp_emoji": "‚ö†Ô∏è",
              "likes": 1,
              "content": "Don't start names with numbers. Python throws a tantrum."
            },
            {
              "id": 30,
              "author": "eggplant_emoji",
              "pfp_emoji": "üçÜ",
              "likes": 0,
              "content": "u can reassign variables like you're reshuffling a playlist."
            }
          ],
          "question": "After running x = 5; x = x + 2; what is x?",
          "choices": [
            "5",
            "2",
            "7",
            "x + 2"
          ],
          "correct_idx": 2
        },
        {
          "id": 31,
          "title": "Math precedence",
          "author": "op_guru",
          "author_pfp_emoji": "‚ûó",
          "topic": 0,
          "section": 3,
          "likes": 58,
          "background": "linear-gradient(135deg, #f093fb 0%, #f5576c 100%)",
          "comments": [
            {
              "id": 32,
              "author": "order_of_ops",
              "pfp_emoji": "üìê",
              "likes": 11,
              "content": "PEMDAS still applies. Exponents first, then mult/div, then add/sub."
            },
            {
              "id": 33,
              "author": "lol_math",
              "pfp_emoji": "üî¢",
              "likes": 2,
              "content": "Use // for floor division if you want integer vibes."
            },
            {
              "id": 34,
              "author": "percent_princess",
              "pfp_emoji": "üéØ",
              "likes": 1,
              "content": "Reminder: % is remainder, not modulo-magic (well it is modulo)."
            }
          ],
          "question": "What is the result of 3 + 4 * 2 ** 2?",
          "choices": [
            "14",
            "28",
            "11",
            "20"
          ],
          "correct_idx": 0
        },
        {
          "id": 35,
          "title": "If/Else branching",
          "author": "branch_boss",
          "author_pfp_emoji": "üåø",
          "topic": 0,
          "section": 4,
          "likes": 176,
          "background": "linear-gradient(135deg, #a8edea 0%, #fed6e3 100%)",
          "comments": [
            {
              "id": 36,
              "author": "truthy_trina",
              "pfp_emoji": "‚ú®",
              "likes": 16,
              "content": "Remember: empty lists/0/'' are falsy in if checks."
            },
            {
              "id": 37,
              "author": "drama_queen",
              "pfp_emoji": "üé≠",
              "likes": 4,
              "content": "elif saves you from nested hell. Thank you, Python."
            },
            {
              "id": 38,
              "author": "keyboard_k",
              "pfp_emoji": "‚å®Ô∏è",
              "likes": 2,
              "content": "Indentation > braces. Don't skip it unless chaos is your aesthetic."
            }
          ],
          "question": "What gets printed by: if []: print('yes') else: print('no')?",
          "choices": [
            "yes",
            "no",
            "[]",
            "Error"
          ],
          "correct_idx": 1
        },
        {
          "id": 39,
          "title": "Function returns",
          "author": "fn_factory",
          "author_pfp_emoji": "üß©",
          "topic": 0,
          "section": 5,
          "likes": 210,
          "background": "linear-gradient(135deg, #96fbc4 0%, #f9f586 100%)",
          "comments": [
            {
              "id": 40,
              "author": "return_of_king",
              "pfp_emoji": "üîô",
              "likes": 22,
              "content": "If no return, function returns None ‚Äî silent but deadly."
            },
            {
              "id": 41,
              "author": "param_pam",
              "pfp_emoji": "üéõÔ∏è",
              "likes": 8,
              "content": "Default args are evaluated at def-time. Mutable defaults = traps."
            },
            {
              "id": 42,
              "author": "skater_g",
              "pfp_emoji": "üõπ",
              "likes": 3,
              "content": "pls pass arguments in right order unless you're into chaos."
            }
          ],
          "question": "What does this function return? def f(a): return a * 2; f(3)",
          "choices": [
            "6",
            "f(3)",
            "None",
            "Error"
          ],
          "correct_idx": 0
        }
      ],
      "reels": [
        {
          "id": 43,
          "title": "If/Else: drama in 12s",
          "author": "branch_boss",
          "author_pfp_emoji": "üåø",
          "topic": 0,
          "section": 4,
          "likes": 890,
          "background": "linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%)",
          "comments": [
            {
              "id": 44,
              "author": "short_and_snappy",
              "pfp_emoji": "‚ö°",
              "likes": 55,
              "content": "This actually made me laugh and learn. 10/10"
            },
            {
              "id": 45,
              "author": "misunderstood_if",
              "pfp_emoji": "üòµ",
              "likes": 9,
              "content": "Wait but what about chained comparisons? explain pls"
            },
            {
              "id": 46,
              "author": "random_meme",
              "pfp_emoji": "ü¶Ñ",
              "likes": 3,
              "content": "That skateboard cameo owned the plot twist üòÇ"
            }
          ],
          "video_prompt": "12s fast-cut comedic explainer. Scene plan: (0-2s) quick title card: 'If/Else: choosing your fate' with glitch sound. (2-6s) Two characters argue: Person A (yells) 'Is this true?!' Person B (deadpan) checks code on laptop and says 'if True: do this' ‚Äî show a snippet: if x > 10:\\n  print('big')\\nelif x == 10:\\n  print('just right')\\nelse:\\n  print('small'). (6-9s) Quick visual: a skateboarder rolls through the shot, tosses a rubber duck that lands next to the laptop ‚Äî zoom on duck labeled 'truthy/falsy'. Voiceover lines: 'Use elif to avoid nested drama. Empty stuff is falsy.' (9-12s) End with a silly reveal: the duck wears a tiny if-statement cape and says 'elif saves lives' with confetti and a one-sentence caption overlay: 'Truthy/falsy, elif, else ‚Äî choose wisely.' Quick visual cuts show code highlights: comparisons (>, ==), and the empty list turning into 'False'. Energetic indie-pop bed, snappy captions, playful acting, lots of jump cuts. Include close-ups of code and callouts like 'no braces, just vibes'. Keep the tone ridiculous and memorable; include short caption frames for the key rules.",
          "video_id": "video_68f5120d62008190ae0e9850c3d942aa05a61ae774a9f770",
          "video_status": "success",
          "video_file": "video_68f5120d62008190ae0e9850c3d942aa05a61ae774a9f770.mp4"
        },
        {
          "id": 47,
          "title": "Functions: returns & defaults (12s chaos)",
          "author": "fn_factory",
          "author_pfp_emoji": "üß©",
          "topic": 0,
          "section": 5,
          "likes": 772,
          "background": "linear-gradient(135deg, #a1c4fd 0%, #c2e9fb 100%)",
          "comments": [
            {
              "id": 48,
              "author": "param_pam",
              "pfp_emoji": "üéõÔ∏è",
              "likes": 31,
              "content": "The 'mutable default' bit had me screaming irl lol"
            },
            {
              "id": 49,
              "author": "helpful_hank",
              "pfp_emoji": "üßØ",
              "likes": 12,
              "content": "Remember: def f(x=[]) is evaluated once. Use None to be safe."
            },
            {
              "id": 50,
              "author": "skate_nate",
              "pfp_emoji": "üõπ",
              "likes": 2,
              "content": "there's a skateboard again. are they part of the function??"
            }
          ],
          "video_prompt": "12-second absurdist demo. Scenes: (0-2s) title flash: 'Functions IRL'. (2-5s) Two friends (one holding a clipboard) demonstrate: Friend 1: 'def greet(name):' Friend 2 shouts 'return f\"hey {name}\"' ‚Äî quick overlay shows code. (5-8s) Sketch gag: a skateboarder zooms by and leaves a pizza slice representing a default argument; the pizza slice gets reused ‚Äî voiceover: 'Defaults are set at def-time ‚Äî mutable defaults stick around.' Show code: def add(item, bag=[]): bag.append(item); return bag. Then show second call accumulating items. (8-11s) Fix tip: show replacement pattern def add(item, bag=None): if bag is None: bag = [] ‚Äî then it works. (11-12s) End card: 'Return things. Don't forget them. None is not an apology.' Use fast cuts, comedic timing, clear code overlays, and upbeat trap-pop music. Include quick text callouts: 'def', 'return', 'params', 'mutable default trap'.",
          "video_id": "video_68f5120f06848193b2e7b5401b6dbd3d0a769c7a2d9c4b78",
          "video_status": "success",
          "video_file": "video_68f5120f06848193b2e7b5401b6dbd3d0a769c7a2d9c4b78.mp4"
        }
      ],
      "posts": [
        {
          "id": 1,
          "title": "Comments: why and how",
          "author": "py_snack",
          "author_pfp_emoji": "üêç",
          "topic": 0,
          "section": 0,
          "likes": 312,
          "background": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
          "comments": [
            {
              "id": 2,
              "author": "docqueen",
              "pfp_emoji": "üìö",
              "likes": 44,
              "content": "Use # for short notes and triple quotes for docstrings that explain functions."
            },
            {
              "id": 3,
              "author": "meme_logic",
              "pfp_emoji": "ü§°",
              "likes": 7,
              "content": "Comment your code so future-you doesn't cry at 3am."
            },
            {
              "id": 4,
              "author": "confused_cat",
              "pfp_emoji": "üê±",
              "likes": 2,
              "content": "Are multiline strings comments? Kinda but they are actual strings if left in code."
            }
          ],
          "slides": [
            {
              "icon": "üí¨",
              "content": "Single-line comment: start with # ‚Äî ignored by Python at runtime."
            },
            {
              "icon": "üìú",
              "content": "Docstring: triple quotes right under def/class to describe behavior and parameters."
            },
            {
              "icon": "‚ö†Ô∏è",
              "content": "Tip: docstrings are accessible via help() and __doc__ ‚Äî they're real objects."
            },
            {
              "icon": "üßº",
              "content": "Keep comments short and relevant: explain why, not what (the code shows what)."
            }
          ]
        },
        {
          "id": 5,
          "title": "Printing & formatting",
          "author": "printly",
          "author_pfp_emoji": "üñ®Ô∏è",
          "topic": 0,
          "section": 1,
          "likes": 480,
          "background": "linear-gradient(135deg, #43cea2 0%, #185a9d 100%)",
          "comments": [
            {
              "id": 6,
              "author": "fmt_king",
              "pfp_emoji": "üéØ",
              "likes": 54,
              "content": "Use f-strings: f\"Hello, {name}!\" ‚Äî readable and concise."
            },
            {
              "id": 7,
              "author": "old_school",
              "pfp_emoji": "üï∞Ô∏è",
              "likes": 6,
              "content": "You can still use format() and %, but f-strings are nicer in Py3.6+."
            },
            {
              "id": 8,
              "author": "noob",
              "pfp_emoji": "üôà",
              "likes": 3,
              "content": "print('a', 'b') adds a space by default ‚Äî use end='' to avoid newline."
            }
          ],
          "slides": [
            {
              "icon": "üñ®Ô∏è",
              "content": "Basic: print('hello world') prints to stdout with newline."
            },
            {
              "icon": "‚ú®",
              "content": "F-strings: name = 'Ada'; print(f'Hi {name}') ‚Äî expressions allowed inside {}."
            },
            {
              "icon": "üîó",
              "content": "sep and end: print('a','b', sep='-', end='!') -> a-b!"
            },
            {
              "icon": "üõ†Ô∏è",
              "content": "Debugging trick: print(variable, type(variable)) to inspect values while coding."
            }
          ]
        },
        {
          "id": 9,
          "title": "Variables: names & assignment",
          "author": "assign_master",
          "author_pfp_emoji": "üîÅ",
          "topic": 0,
          "section": 2,
          "likes": 254,
          "background": "linear-gradient(135deg, #f6d365 0%, #fda085 100%)",
          "comments": [
            {
              "id": 10,
              "author": "mutable_mel",
              "pfp_emoji": "üß†",
              "likes": 20,
              "content": "Variables are references. Assigning copies references for mutable objects."
            },
            {
              "id": 11,
              "author": "naming_ninja",
              "pfp_emoji": "ü™ì",
              "likes": 8,
              "content": "Choose clear names: total_price > x. Readability matters."
            },
            {
              "id": 12,
              "author": "typo_trek",
              "pfp_emoji": "‚ö†Ô∏è",
              "likes": 1,
              "content": "Syntax error if name starts with digit. Also avoid reserved keywords."
            }
          ],
          "slides": [
            {
              "icon": "üè∑Ô∏è",
              "content": "Assignment: x = 42 ‚Äî binds the name x to the value 42."
            },
            {
              "icon": "üîÅ",
              "content": "Multiple assign: a, b = 1, 2 or x = y = 0 for chaining."
            },
            {
              "icon": "üìõ",
              "content": "Naming: letters, digits, underscores; can't start with digit; be descriptive."
            },
            {
              "icon": "üß©",
              "content": "Mutable vs immutable: lists change in place, ints/tuples are immutable."
            }
          ]
        },
        {
          "id": 13,
          "title": "Math operators: the essentials",
          "author": "op_guru",
          "author_pfp_emoji": "‚ûó",
          "topic": 0,
          "section": 3,
          "likes": 199,
          "background": "linear-gradient(135deg, #f093fb 0%, #f5576c 100%)",
          "comments": [
            {
              "id": 14,
              "author": "order_of_ops",
              "pfp_emoji": "üìê",
              "likes": 17,
              "content": "Remember precedence: ** then * / // % then + -."
            },
            {
              "id": 15,
              "author": "int_vs_float",
              "pfp_emoji": "üî¢",
              "likes": 6,
              "content": "Use // for floor division if you want ints; / returns float."
            },
            {
              "id": 16,
              "author": "lil_memer",
              "pfp_emoji": "ü¶ô",
              "likes": 2,
              "content": "Modulus is like 'leftovers' after sharing pizza üçï"
            }
          ],
          "slides": [
            {
              "icon": "‚ûï",
              "content": "+, -, *, / ‚Äî basic arithmetic, / returns float."
            },
            {
              "icon": "ü™Ñ",
              "content": "** exponent, // floor-division, % remainder."
            },
            {
              "icon": "‚öñÔ∏è",
              "content": "Order of operations applies; use parentheses to force order."
            },
            {
              "icon": "üß™",
              "content": "Casting: int(3.7) -> 3, float(2) -> 2.0 when you need specific types."
            }
          ]
        },
        {
          "id": 17,
          "title": "If / Elif / Else: branching",
          "author": "branch_boss",
          "author_pfp_emoji": "üåø",
          "topic": 0,
          "section": 4,
          "likes": 421,
          "background": "linear-gradient(135deg, #a8edea 0%, #fed6e3 100%)",
          "comments": [
            {
              "id": 18,
              "author": "truthy_trina",
              "pfp_emoji": "‚ú®",
              "likes": 34,
              "content": "Truthy/falsy gotchas: 0, '', [], {}, None are falsy."
            },
            {
              "id": 51,
              "author": "nested_nerd",
              "pfp_emoji": "üåÄ",
              "likes": 6,
              "content": "Use early returns or elif to avoid deep nesting."
            },
            {
              "id": 52,
              "author": "lol_branches",
              "pfp_emoji": "üå≥",
              "likes": 2,
              "content": "If your nested tree looks like Jumanji, refactor pls."
            }
          ],
          "slides": [
            {
              "icon": "üîÄ",
              "content": "Basic: if condition: do_this  ‚Äî condition must be truthy to run block."
            },
            {
              "icon": "üß≠",
              "content": "elif chains multiple checks; only the first true branch runs."
            },
            {
              "icon": "üõ°Ô∏è",
              "content": "else runs when previous conditions are false ‚Äî acts as fallback."
            },
            {
              "icon": "ü§î",
              "content": "Compare with ==, !=, >, <, >=, <= and use 'and/or/not' for combos."
            }
          ]
        },
        {
          "id": 53,
          "title": "Functions: defs, params, returns",
          "author": "fn_factory",
          "author_pfp_emoji": "üß©",
          "topic": 0,
          "section": 5,
          "likes": 632,
          "background": "linear-gradient(135deg, #96fbc4 0%, #f9f586 100%)",
          "comments": [
            {
              "id": 54,
              "author": "return_of_king",
              "pfp_emoji": "üîô",
              "likes": 45,
              "content": "Don't forget return. Without it you get None and existential crisis."
            },
            {
              "id": 55,
              "author": "param_pam",
              "pfp_emoji": "üéõÔ∏è",
              "likes": 18,
              "content": "Keyword args make calls readable: func(x=1, y=2)."
            },
            {
              "id": 56,
              "author": "mutable_mel",
              "pfp_emoji": "üß†",
              "likes": 9,
              "content": "Mutable default params are a common trap ‚Äî use None check."
            }
          ],
          "slides": [
            {
              "icon": "üß≠",
              "content": "Define: def name(params): body ‚Äî defines reusable behavior."
            },
            {
              "icon": "üéÅ",
              "content": "Parameters: positional and keyword; default values allowed."
            },
            {
              "icon": "üîô",
              "content": "Return: send value back with return. No return -> returns None."
            },
            {
              "icon": "‚ö†Ô∏è",
              "content": "Mutable default trap: def f(a, L=[]): ... ‚Äî prefer None and set inside."
            }
          ]
        }
      ],
      "images": [
        {
          "id": 57,
          "title": "If/Else flow diagram",
          "author": "visual_viv",
          "author_pfp_emoji": "üé®",
          "topic": 0,
          "section": 4,
          "likes": 88,
          "background": "linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%)",
          "comments": [
            {
              "id": 58,
              "author": "flow_fan",
              "pfp_emoji": "üó∫Ô∏è",
              "likes": 6,
              "content": "This flowchart makes branching so much clearer."
            },
            {
              "id": 59,
              "author": "nitpicker",
              "pfp_emoji": "üîç",
              "likes": 1,
              "content": "Add a note about truthy/falsy for the condition nodes."
            }
          ],
          "image_prompt": "Simple clean flowchart diagram showing an if/elif/else decision flow. Start node labeled 'condition', arrow to 'if True' block, then an elif node and else fallback. Use flat pastel colors and clear arrows, minimal text, no code screenshots. Emphasize first-true-branch behavior.",
          "description": "A clear flowchart illustrating an if -> elif -> else decision path with arrows showing only the first matching branch executes.",
          "caption": "If/elif/else executes the first true branch; else is a fallback. Use flowcharts to plan branching logic.",
          "file": "22e05d20-bf1e-41b9-8aac-10f5ec689978.png"
        },
        {
          "id": 60,
          "title": "Function call diagram",
          "author": "visual_viv",
          "author_pfp_emoji": "üé®",
          "topic": 0,
          "section": 5,
          "likes": 104,
          "background": "linear-gradient(135deg, #e0c3fc 0%, #8ec5fc 100%)",
          "comments": [
            {
              "id": 61,
              "author": "call_stack_carl",
              "pfp_emoji": "üß†",
              "likes": 8,
              "content": "Nice to see how args move into params and returns come back."
            },
            {
              "id": 62,
              "author": "who_me",
              "pfp_emoji": "ü§∑",
              "likes": 2,
              "content": "Can this show default arg creation too? would be üî•"
            }
          ],
          "image_prompt": "Minimal diagram showing a function definition box, an arrow from caller with arguments to the function, and arrow back with return value. Use bright colors, no text inside shapes except labels 'caller', 'function', 'return'. Flat cartoon style, high contrast.",
          "description": "Diagram showing a caller passing arguments into a function box and the function returning a value back to the caller.",
          "caption": "Functions take inputs (params) and return outputs. If no return is given, the function returns None.",
          "file": "026424d5-24db-4272-9227-bd9867c6f698.png"
        },
        {
          "id": 63,
          "title": "Code meme: pizza defaults",
          "author": "meme_logic",
          "author_pfp_emoji": "ü§°",
          "topic": 0,
          "section": 5,
          "likes": 302,
          "background": "linear-gradient(135deg, #fddb92 0%, #d1fdff 100%)",
          "comments": [
            {
              "id": 64,
              "author": "param_pam",
              "pfp_emoji": "üéõÔ∏è",
              "likes": 28,
              "content": "Mutable default meme but make it pizza. Accurate and hilarious."
            },
            {
              "id": 65,
              "author": "random_meme",
              "pfp_emoji": "ü¶Ñ",
              "likes": 6,
              "content": "This is why I love code memes. Teach and roast at once."
            }
          ],
          "image_prompt": "A humorous photo-style image: a stack of pizzas labeled as 'default list' being reused across function calls. Cartoon overlay, bright colors, no readable code text. Emphasize pizza slice being added each call.",
          "description": "A funny illustration of a pizza stack representing a mutable default list being reused across calls.",
          "caption": "Mutable defaults retain changes between calls. Use None as a sentinel to create fresh defaults inside the function.",
          "file": "ca0bbdaf-657a-461b-a244-079bdc16494c.png"
        }
      ]
    },
    {
      "id": "6fc40731-73be-4120-89bb-f3a490fd49ce",
      "status": "ready",
      "prompt": "I would like to learn about newtonian physics, for the reels, please show cool physics experiments!",
      "title": "Newtonian physics",
      "topics": [
        {
          "title": "Newtonian physics",
          "sections": [
            "Kinematics",
            "Forces",
            "Newton's Laws",
            "Friction",
            "Circular Motion",
            "Energy & Work"
          ]
        }
      ],
      "question": [
        {
          "id": 1,
          "title": "Velocity vs Speed",
          "author": "quizzy_phys",
          "author_pfp_emoji": "‚ùì",
          "topic": 0,
          "section": 0,
          "likes": 84,
          "background": "linear-gradient(135deg, #00b4db 0%, #0083b0 100%)",
          "comments": [
            {
              "id": 1,
              "author": "calc_cat",
              "pfp_emoji": "üê±",
              "likes": 9,
              "content": "Speed is scalar, velocity is vector. Not the same thing unless direction stays the same."
            },
            {
              "id": 2,
              "author": "meme_engine",
              "pfp_emoji": "üòÇ",
              "likes": 3,
              "content": "So velocity is like 'I went fast *that way*', speed is 'I went fast' ‚Äî direction matters. Dramatic, I know."
            },
            {
              "id": 3,
              "author": "street_physics",
              "pfp_emoji": "üõπ",
              "likes": 5,
              "content": "Common trap: average speed != magnitude of average velocity if directions change."
            }
          ],
          "question": "Which statement is true about speed and velocity?",
          "choices": [
            "Speed includes direction but velocity does not",
            "Velocity includes direction but speed does not",
            "Speed and velocity are always numerically equal",
            "Velocity is always positive while speed can be negative"
          ],
          "correct_idx": 1
        },
        {
          "id": 2,
          "title": "Net force calculation",
          "author": "force_field101",
          "author_pfp_emoji": "üí™",
          "topic": 0,
          "section": 1,
          "likes": 156,
          "background": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
          "comments": [
            {
              "id": 1,
              "author": "lab_rat",
              "pfp_emoji": "üß™",
              "likes": 12,
              "content": "Remember to add vectors, not just magnitudes. Directions matter!"
            },
            {
              "id": 2,
              "author": "sheldon_lite",
              "pfp_emoji": "ü§ì",
              "likes": 6,
              "content": "If forces are opposite, subtract magnitudes. If perpendicular, use Pythagorean theorem."
            },
            {
              "id": 3,
              "author": "jokes_on_you",
              "pfp_emoji": "üòÖ",
              "likes": 2,
              "content": "If net force = 0, object's not lazy, it's in equilibrium. Chill mode: ON."
            }
          ],
          "question": "If a 5 N force east and a 12 N force north act on an object, what is the magnitude of the net force?",
          "choices": [
            "7 N",
            "13 N",
            "17 N",
            "‚àö169 N"
          ],
          "correct_idx": 1
        },
        {
          "id": 3,
          "title": "Third Law trap",
          "author": "newtonfan",
          "author_pfp_emoji": "üçè",
          "topic": 0,
          "section": 2,
          "likes": 210,
          "background": "linear-gradient(135deg, #f6d365 0%, #fda085 100%)",
          "comments": [
            {
              "id": 1,
              "author": "mom_says",
              "pfp_emoji": "üßë‚Äçüè´",
              "likes": 18,
              "content": "Action and reaction act on different objects ‚Äî they don't cancel on the same object."
            },
            {
              "id": 2,
              "author": "meme_master",
              "pfp_emoji": "ü§°",
              "likes": 4,
              "content": "Newton: 'you push me, I push you back' ‚Äî still our best friendship contract."
            },
            {
              "id": 3,
              "author": "confused_student",
              "pfp_emoji": "üòµ",
              "likes": 1,
              "content": "Wait but if I step on the floor and it pushes back, why do I move? (Answer: because forces on you and floor are on different bodies)"
            }
          ],
          "question": "Which of these best expresses Newton's third law?",
          "choices": [
            "For every force, there is an equal and opposite force acting on the same object",
            "For every force, there is an equal and opposite force acting on a different object",
            "Every object resists changes to its motion",
            "Net force equals mass times acceleration"
          ],
          "correct_idx": 1
        },
        {
          "id": 4,
          "title": "Friction direction",
          "author": "rough_surface",
          "author_pfp_emoji": "ü™µ",
          "topic": 0,
          "section": 3,
          "likes": 63,
          "background": "linear-gradient(135deg, #11998e 0%, #38ef7d 100%)",
          "comments": [
            {
              "id": 1,
              "author": "physics_maven",
              "pfp_emoji": "üî≠",
              "likes": 7,
              "content": "Friction opposes relative motion (or impending motion) at the contact surface, not necessarily 'opposite the applied force'."
            },
            {
              "id": 2,
              "author": "sassy_student",
              "pfp_emoji": "üôÑ",
              "likes": 2,
              "content": "So friction is like that clingy friend that always resists your moves."
            },
            {
              "id": 3,
              "author": "clarity_bot",
              "pfp_emoji": "ü§ñ",
              "likes": 5,
              "content": "Static friction ‚â§ ŒºsN and can adjust to match applied forces up to its max."
            }
          ],
          "question": "If you push a box rightward slowly and it doesn't move, what can be said about static friction?",
          "choices": [
            "Static friction is zero",
            "Static friction equals the applied push and points left",
            "Static friction equals the applied push and points right",
            "Static friction equals ŒºkN"
          ],
          "correct_idx": 1
        },
        {
          "id": 5,
          "title": "Work sign convention",
          "author": "joule_jane",
          "author_pfp_emoji": "‚ö°",
          "topic": 0,
          "section": 5,
          "likes": 97,
          "background": "linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%)",
          "comments": [
            {
              "id": 1,
              "author": "energy_guy",
              "pfp_emoji": "üîã",
              "likes": 11,
              "content": "Work positive if force has a component along displacement. If force opposes displacement, work is negative."
            },
            {
              "id": 2,
              "author": "sneaky_memer",
              "pfp_emoji": "üòπ",
              "likes": 3,
              "content": "So lifting = positive. Dropping = negative? (Depends who did the work lol)"
            },
            {
              "id": 3,
              "author": "lab_rat",
              "pfp_emoji": "üß™",
              "likes": 2,
              "content": "Common error: thinking that force and displacement must be same direction; only component matters."
            }
          ],
          "question": "A constant force of 10 N acts horizontally on an object that moves 3 m horizontally. How much work does the force do?",
          "choices": [
            "30 J",
            "0 J",
            "3 J",
            "10 J"
          ],
          "correct_idx": 0
        }
      ],
      "reels": [
        {
          "id": 1,
          "title": "Tablecloth Inertia Trick ‚Äî Instant Chaos",
          "author": "experiment_ella",
          "author_pfp_emoji": "üß™",
          "topic": 0,
          "section": 2,
          "likes": 1840,
          "background": "linear-gradient(135deg, #ff7e5f 0%, #feb47b 100%)",
          "comments": [
            {
              "id": 1,
              "author": "sk8r_boi",
              "pfp_emoji": "üõπ",
              "likes": 120,
              "content": "That glass survived better than my last relationship üò≠"
            },
            {
              "id": 2,
              "author": "safety_officer",
              "pfp_emoji": "ü¶∫",
              "likes": 32,
              "content": "Pro tip: use heavy flatware and a smooth cloth; demo works because of low friction and object inertia."
            },
            {
              "id": 3,
              "author": "the_real_nerd",
              "pfp_emoji": "ü§ì",
              "likes": 45,
              "content": "Common misconception: 'tablecloth = magic' ‚Äî it's just inertia + short, fast pull = low horizontal impulse to objects."
            },
            {
              "id": 4,
              "author": "meme_lord",
              "pfp_emoji": "ü§°",
              "likes": 9,
              "content": "Me trying to remove responsibilities from my life like *pulls cloth slowly*... nope"
            }
          ],
          "video_prompt": "12s energetic reel: Title 'Tablecloth Inertia Trick ‚Äî Instant Chaos'. Scene 1 (0‚Äì1s): quick jump-cut neon intro card with bass hit: text overlay 'Inertia IRL' (vibe: chaotic-study-buddy). Scene 2 (1‚Äì4s): wide shot of a kitchen table with dishes, someone in hoodie (Ella) grabs a colorful tablecloth; a skater in the background cruises across the frame on a skateboard for 0.5s (not main focus). Voice over (fast, playful): 'Watch this ‚Äî physics will do the heavy lifting.' Scene 3 (4‚Äì8s): slow-mo as Ella yanks the cloth ‚Äî show plates barely move. Quick on-screen arrows showing 'inertia' on plates. Overlay caption: 'Objects resist change in motion.' Scene 4 (8‚Äì11s): cut to cartoonish reaction of a friend (overacted) pretending glass almost fell; quick text bullet: 'low friction + quick pull = objects stay put'. Closing 11‚Äì12s: Ella does a dramatic mic drop (literal spoon) and wink. Visually include brief pop-up of simple equation 'F = ma' with animation pointing to 'a ‚âà 0' during pull. Tone: loud, silly, surprising. Include caption voice lines: one-liners explaining inertia and why quick pull works. End with call-to-action: 'Try safe demo with plasticware only.'",
          "video_id": "video_68f51748e47c8193873773820740427c0d1d6247a817e665",
          "video_status": "success",
          "video_file": "video_68f51748e47c8193873773820740427c0d1d6247a817e665.mp4"
        },
        {
          "id": 2,
          "title": "Skateboard vs Ball ‚Äî Momentum Clash",
          "author": "collision_crew",
          "author_pfp_emoji": "üõπ",
          "topic": 0,
          "section": 2,
          "likes": 1420,
          "background": "linear-gradient(135deg, #43cea2 0%, #185a9d 100%)",
          "comments": [
            {
              "id": 1,
              "author": "physics_ally",
              "pfp_emoji": "üîÅ",
              "likes": 67,
              "content": "Nice visual for conservation of momentum. People forget momentum is vector ‚Äî direction matters."
            },
            {
              "id": 2,
              "author": "slapstick_sam",
              "pfp_emoji": "ü§£",
              "likes": 14,
              "content": "Skateboard cameo steals the show. 10/10 would collide again."
            },
            {
              "id": 3,
              "author": "safety_first",
              "pfp_emoji": "üß§",
              "likes": 5,
              "content": "Reminder: do collisions on soft mats and wear helmets. Physics > faceplants."
            }
          ],
          "video_prompt": "12s comedic reel: Title 'Skateboard vs Ball ‚Äî Momentum Clash'. Scene 1 (0‚Äì1s): quick neon intro with staccato synth. Scene 2 (1‚Äì3s): two characters ‚Äî 'Riley' on a skateboard (briefly visible doing a trick across background) and 'Cam' holding a heavy medicine ball on a gym floor. VO: 'Conservation of momentum ‚Äî but make it dramatic.' Scene 3 (3‚Äì7s): Cam rolls the medicine ball toward Riley's skateboard carrying a small clay ball; collision happens. Split-screen visuals: before/after momentum vectors drawn (arrow size = momentum). Quick caption: 'm_initial = m_final'. Scene 4 (7‚Äì10s): comedic reaction: skateboarder gets gently pushed, exaggerated hair float, text 'same momentum, different speeds'. Scene 5 (10‚Äì12s): short explainer bubble: show equation p = mv and a 2-line voiceover: 'Big mass ‚Üí small speed change; small mass ‚Üí big speed change.' Tone: playful, loud, slightly absurd; include skateboard cameo for cool factor and quick close-ups of vectors and slow-mo impact.",
          "video_id": "video_68f5174ab5608193b4473d7d4718222f089ab546271ac33a",
          "video_status": "success",
          "video_file": "video_68f5174ab5608193b4473d7d4718222f089ab546271ac33a.mp4"
        },
        {
          "id": 3,
          "title": "Projectile Popcorn Launch",
          "author": "launch_lab",
          "author_pfp_emoji": "üçø",
          "topic": 0,
          "section": 0,
          "likes": 920,
          "background": "linear-gradient(135deg, #f7971e 0%, #ffd200 100%)",
          "comments": [
            {
              "id": 1,
              "author": "trajectory_tim",
              "pfp_emoji": "üìà",
              "likes": 22,
              "content": "Nice parabola! People trip up forgetting horizontal and vertical motion are independent."
            },
            {
              "id": 2,
              "author": "snack_attack",
              "pfp_emoji": "üçø",
              "likes": 6,
              "content": "Popcorn physics? Sign me up. Also: the landing snack count = 0 because we ate them."
            },
            {
              "id": 3,
              "author": "safety_officer",
              "pfp_emoji": "üõë",
              "likes": 3,
              "content": "Use soft projectiles and goggles. We're learning, not eye-surgery-ing."
            }
          ],
          "video_prompt": "12s playful reel: Title 'Projectile Popcorn Launch'. Scene 1 (0‚Äì1s): snappy title card 'Parabolas IRL' with upbeat pop beat. Scene 2 (1‚Äì4s): wide shot: someone on a skateboard casually rolls across behind a small catapult launching popcorn (skateboard isn't main focus, just cameo). VO: 'Horizontal velocity and gravity are vibing separately.' Scene 3 (4‚Äì8s): slow-mo popcorn arc, overlayed grid showing equal-time vertical drops; show equations vx = constant, y = 1/2 g t^2 in quick captions. Scene 4 (8‚Äì11s): compare two launches: steeper vs flatter, show range differences. Quick comedic beat: popcorn narrowly misses a friend. Scene 5 (11‚Äì12s): punchline tagline: 'Gravity doesn't care if you're dramatic.' Include quick closing line: 'Predict where it lands ‚Äî it's just math + chaos.'",
          "video_id": "video_68f5174ce53c8191abefbd17422c59f6026246a050f4486d",
          "video_status": "success",
          "video_file": "video_68f5174ce53c8191abefbd17422c59f6026246a050f4486d.mp4"
        }
      ],
      "posts": [
        {
          "id": 1,
          "title": "Motion basics",
          "author": "physics_maven",
          "author_pfp_emoji": "üî≠",
          "topic": 0,
          "section": 0,
          "likes": 423,
          "background": "linear-gradient(135deg, #00c6ff 0%, #0072ff 100%)",
          "comments": [
            {
              "id": 1,
              "author": "speedy_gonz",
              "pfp_emoji": "üí®",
              "likes": 14,
              "content": "So does constant speed mean constant velocity? (Nope, direction can change!)"
            },
            {
              "id": 2,
              "author": "meme_engine",
              "pfp_emoji": "üòÇ",
              "likes": 5,
              "content": "If distance is a gossip and displacement is the tea, I'm here for the drama ‚òïÔ∏è"
            },
            {
              "id": 3,
              "author": "clarity_bot",
              "pfp_emoji": "ü§ñ",
              "likes": 9,
              "content": "Tip: v = Œîx/Œît for average velocity; instantaneous uses derivatives."
            }
          ],
          "slides": [
            {
              "icon": "üìç",
              "content": "Position vs time: position = where you are on a chosen coordinate axis."
            },
            {
              "icon": "‚û°Ô∏è",
              "content": "Displacement = change in position (vector). Distance = total path (scalar)."
            },
            {
              "icon": "‚è±Ô∏è",
              "content": "Velocity = displacement / time. Speed = distance / time. Direction matters for velocity."
            },
            {
              "icon": "üìà",
              "content": "Acceleration = change in velocity / time. Can be from speed or direction change (think turning)."
            }
          ]
        },
        {
          "id": 2,
          "title": "What is a force?",
          "author": "force_field101",
          "author_pfp_emoji": "üí™",
          "topic": 0,
          "section": 1,
          "likes": 512,
          "background": "linear-gradient(135deg, #7f00ff 0%, #e100ff 100%)",
          "comments": [
            {
              "id": 1,
              "author": "street_physics",
              "pfp_emoji": "üõπ",
              "likes": 20,
              "content": "Force = push or pull, but don't forget contact vs field forces (like gravity)."
            },
            {
              "id": 2,
              "author": "nitpicker",
              "pfp_emoji": "ü§è",
              "likes": 4,
              "content": "Vector alert: you must specify direction when adding forces."
            },
            {
              "id": 3,
              "author": "meme_lord",
              "pfp_emoji": "ü§°",
              "likes": 2,
              "content": "Me trying to add forces: *adds like groceries* 'one bag left or right?'"
            }
          ],
          "slides": [
            {
              "icon": "üß≤",
              "content": "Types: contact (push/pull, friction, tension) and field (gravity, electrostatic)."
            },
            {
              "icon": "üìê",
              "content": "Forces are vectors: add them tip-to-tail or break into components."
            },
            {
              "icon": "‚öñÔ∏è",
              "content": "Normal force is perpendicular to contact surface; it adjusts based on other vertical forces."
            },
            {
              "icon": "üìå",
              "content": "Weight is gravitational force: W = mg. Mass ‚â† weight."
            }
          ]
        },
        {
          "id": 3,
          "title": "Newton's laws ‚Äî cheat sheet",
          "author": "newtonfan",
          "author_pfp_emoji": "üçè",
          "topic": 0,
          "section": 2,
          "likes": 1345,
          "background": "linear-gradient(135deg, #11998e 0%, #38ef7d 100%)",
          "comments": [
            {
              "id": 1,
              "author": "history_buff",
              "pfp_emoji": "üìú",
              "likes": 18,
              "content": "1st: inertia. 2nd: F=ma. 3rd: action-reaction pairs. So iconic."
            },
            {
              "id": 2,
              "author": "confused_student",
              "pfp_emoji": "üòµ",
              "likes": 6,
              "content": "Why doesn't the 3rd law cancel forces? (Because they act on different bodies, duh.)"
            },
            {
              "id": 3,
              "author": "meme_engine",
              "pfp_emoji": "üòÇ",
              "likes": 3,
              "content": "Newton: 'no acceleration? you're lazy.'"
            }
          ],
          "slides": [
            {
              "icon": "üõå",
              "content": "1st law (inertia): Objects keep their state of motion unless net force acts."
            },
            {
              "icon": "‚öñÔ∏è",
              "content": "2nd law: F_net = m a. Acceleration proportional to net force and inversely to mass."
            },
            {
              "icon": "ü§ù",
              "content": "3rd law: For every force there is an equal/opposite force on a different object."
            }
          ]
        },
        {
          "id": 4,
          "title": "Friction & Normal Force",
          "author": "lab_rat",
          "author_pfp_emoji": "üß™",
          "topic": 0,
          "section": 3,
          "likes": 278,
          "background": "linear-gradient(135deg, #f857a6 0%, #ff5858 100%)",
          "comments": [
            {
              "id": 1,
              "author": "traction_king",
              "pfp_emoji": "üëë",
              "likes": 13,
              "content": "Static friction stops motion up to ŒºsN, kinetic friction = ŒºkN once sliding starts."
            },
            {
              "id": 2,
              "author": "sassy_student",
              "pfp_emoji": "üôÑ",
              "likes": 4,
              "content": "So rough = more Œº. Shocking."
            },
            {
              "id": 3,
              "author": "safety_first",
              "pfp_emoji": "ü¶∫",
              "likes": 2,
              "content": "Remember: friction direction is opposite relative motion or impending motion."
            }
          ],
          "slides": [
            {
              "icon": "üß∑",
              "content": "Normal force (N) is perpendicular to the contact surface. On flat ground, N ‚âà mg if no vertical acceleration."
            },
            {
              "icon": "üß±",
              "content": "Static friction prevents motion up to its max: f_s ‚â§ Œº_s N."
            },
            {
              "icon": "üèÇ",
              "content": "Kinetic friction acts during sliding: f_k = Œº_k N (usually less than Œº_s)."
            },
            {
              "icon": "‚ö†Ô∏è",
              "content": "Common mistake: assuming friction always equals ŒºN ‚Äî static friction can be less depending on applied force."
            }
          ]
        },
        {
          "id": 5,
          "title": "Circular motion essentials",
          "author": "orbit_gal",
          "author_pfp_emoji": "üåÄ",
          "topic": 0,
          "section": 4,
          "likes": 341,
          "background": "linear-gradient(135deg, #ff6a00 0%, #ee0979 100%)",
          "comments": [
            {
              "id": 1,
              "author": "centripetal_claire",
              "pfp_emoji": "üîÅ",
              "likes": 11,
              "content": "Centripetal force points toward center, not some spooky outward force."
            },
            {
              "id": 2,
              "author": "wild_memer",
              "pfp_emoji": "ü§™",
              "likes": 3,
              "content": "Centrifugal: the fake force your brain invents when you spin."
            },
            {
              "id": 3,
              "author": "explain_it",
              "pfp_emoji": "üß†",
              "likes": 5,
              "content": "a_c = v^2/r. If v increases, centripetal force must increase a lot."
            }
          ],
          "slides": [
            {
              "icon": "üîÑ",
              "content": "Centripetal acceleration points to center: a_c = v^2 / r or œâ^2 r."
            },
            {
              "icon": "üß≤",
              "content": "Centripetal force is sum of real forces causing circular motion (tension, friction, normal)."
            },
            {
              "icon": "üöó",
              "content": "Watch units: faster speed or smaller radius ‚Üí much larger centripetal acceleration."
            }
          ]
        },
        {
          "id": 6,
          "title": "Work & Energy (short)",
          "author": "joule_jane",
          "author_pfp_emoji": "‚ö°",
          "topic": 0,
          "section": 5,
          "likes": 652,
          "background": "linear-gradient(135deg, #00f260 0%, #0575e6 100%)",
          "comments": [
            {
              "id": 1,
              "author": "energy_guy",
              "pfp_emoji": "üîã",
              "likes": 20,
              "content": "Work = F ¬∑ d (dot product). Kinetic energy = 1/2 mv^2. Energy conserved unless non-conservative forces do work."
            },
            {
              "id": 2,
              "author": "lazy_student",
              "pfp_emoji": "üò¥",
              "likes": 3,
              "content": "So pushing a wall and it doesn't move = zero work. Sad but true."
            },
            {
              "id": 3,
              "author": "clarity_bot",
              "pfp_emoji": "ü§ñ",
              "likes": 6,
              "content": "Potential energy depends on reference level ‚Äî choose one and be consistent."
            }
          ],
          "slides": [
            {
              "icon": "üèãÔ∏è‚Äç‚ôÄÔ∏è",
              "content": "Work (W) = force √ó displacement √ó cosŒ∏. Only the force component along displacement does work."
            },
            {
              "icon": "‚ö°",
              "content": "Kinetic energy KE = 1/2 m v^2. Work-energy theorem: W_net = ŒîKE."
            },
            {
              "icon": "ü™ú",
              "content": "Gravitational potential energy near Earth: U = m g h (choose h = 0 reference)."
            },
            {
              "icon": "‚ôªÔ∏è",
              "content": "Total mechanical energy conserved if no friction or non-conservative work."
            }
          ]
        }
      ],
      "images": [
        {
          "id": 1,
          "title": "Free-body diagram ‚Äî box on incline",
          "author": "diagram_dave",
          "author_pfp_emoji": "üìê",
          "topic": 0,
          "section": 1,
          "likes": 210,
          "background": "linear-gradient(135deg, #3a1c71 0%, #d76d77 100%)",
          "comments": [
            {
              "id": 1,
              "author": "teacher_tom",
              "pfp_emoji": "üßë‚Äçüè´",
              "likes": 12,
              "content": "Image shows weight mg down, normal N perpendicular, friction along surface. Resolve mg into components parallel and perpendicular to slope."
            },
            {
              "id": 2,
              "author": "memebot",
              "pfp_emoji": "ü§ñ",
              "likes": 3,
              "content": "Incline: the OG party for vectors."
            }
          ],
          "image_prompt": "Realistic diagram: a small block on an inclined plane set at 30¬∞, with arrows showing forces: weight vector straight down (mg), normal perpendicular to plane, friction along plane opposing motion. Clean white background, labeled arrows (no heavy text), soft shadows, pastel color palette.",
          "description": "Diagram of a block on a 30¬∞ incline with arrows for weight, normal force, and friction; the weight vector is resolved into components parallel and perpendicular to the plane.",
          "caption": "Free-body diagram for an incline: resolve weight into mg sinŒ∏ (parallel) and mg cosŒ∏ (perpendicular). Normal force balances mg cosŒ∏ if no vertical acceleration.",
          "file": "1c0332e8-2d0c-4d22-b2f5-fa2df00bfd0c.png"
        },
        {
          "id": 2,
          "title": "Tablecloth trick in mid-pull",
          "author": "experiment_ella",
          "author_pfp_emoji": "üß™",
          "topic": 0,
          "section": 2,
          "likes": 1460,
          "background": "linear-gradient(135deg, #ff5f6d 0%, #ffc371 100%)",
          "comments": [
            {
              "id": 1,
              "author": "safety_first",
              "pfp_emoji": "üõ°Ô∏è",
              "likes": 21,
              "content": "Beautiful capture. Reminder: use plasticware in demos to avoid shards."
            },
            {
              "id": 2,
              "author": "inertia_infantry",
              "pfp_emoji": "ü™ñ",
              "likes": 8,
              "content": "Great shot showing objects barely move ‚Äî classic inertia demo."
            }
          ],
          "image_prompt": "Photorealistic photo: someone sharply pulling a colorful tablecloth from under plates and cups; capture the instant with plates almost stationary, slight motion blur on cloth, bright kitchen lighting, casual people in background (one on a skateboard passing by briefly, blurred). Emphasize motion and surprised expressions.",
          "description": "Photo of a person pulling a tablecloth rapidly while plates on top remain nearly in place; background shows a skateboard passing briefly.",
          "caption": "Tablecloth inertia demo: a quick pull minimizes horizontal impulse to the plates, so they remain roughly at rest due to inertia and low friction.",
          "file": "374edc62-dff7-431b-954e-d4a41470ad21.png"
        },
        {
          "id": 3,
          "title": "Projectile trajectory (popcorn arc)",
          "author": "launch_lab",
          "author_pfp_emoji": "üçø",
          "topic": 0,
          "section": 0,
          "likes": 730,
          "background": "linear-gradient(135deg, #00b09b 0%, #96c93d 100%)",
          "comments": [
            {
              "id": 1,
              "author": "trajectory_tim",
              "pfp_emoji": "üìà",
              "likes": 9,
              "content": "Nice parabola ‚Äî horizontal motion unaffected by gravity (aside from initial vertical component)."
            },
            {
              "id": 2,
              "author": "snack_attack",
              "pfp_emoji": "üçø",
              "likes": 4,
              "content": "This is an edible science lesson. Love it."
            }
          ],
          "image_prompt": "High-speed photo of a small projectile (like a popcorn kernel) in mid-air following a parabolic arc, with a faint grid overlay to hint at trajectory. Bright background, sharp focus on kernel, blurred background.",
          "description": "High-speed image capturing a popcorn kernel in mid-flight tracing a curved parabolic path, with background blur to emphasize motion.",
          "caption": "Projectile motion: the path is parabolic because horizontal velocity is constant while vertical motion accelerates downward at g.",
          "file": "cf393a57-8941-46f4-8825-a605e2bc5e56.png"
        }
      ]
    }
  ]
}