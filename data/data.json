{
  "users": [
    {
      "name": "eli",
      "progress": {}
    }
  ],
  "studysets": [
    {
      "id": "91ebe048-5253-415d-8f18-f39e3a68241c",
      "status": "ready",
      "prompt": "I would like to learn the following python concepts: comments, printing, variables, math operators, if/else, and functions",
      "title": "Python crash: basics",
      "topics": [
        {
          "title": "Python basics",
          "sections": [
            "Comments",
            "Printing",
            "Variables",
            "Math operators",
            "If/Else",
            "Functions"
          ]
        }
      ],
      "question": [
        {
          "id": 19,
          "title": "Comment syntax",
          "author": "py_snack",
          "author_pfp_emoji": "üêç",
          "topic": 0,
          "section": 0,
          "likes": 92,
          "background": "linear-gradient(135deg, #f6d365 0%, #fda085 100%)",
          "comments": [
            {
              "id": 20,
              "author": "code_bae",
              "pfp_emoji": "üíª",
              "likes": 14,
              "content": "Single-line comments start with # ‚Äî easy peasy."
            },
            {
              "id": 21,
              "author": "meme_logic",
              "pfp_emoji": "ü§°",
              "likes": 3,
              "content": "Multiline string ‚â† comment if you're actually using it as a value lol"
            },
            {
              "id": 22,
              "author": "docqueen",
              "pfp_emoji": "üìö",
              "likes": 7,
              "content": "Use triple quotes for docstrings (they're real objects) and # for notes."
            }
          ],
          "question": "Which of these is a proper single-line comment in Python?",
          "choices": [
            "/* comment */",
            "<!-- comment -->",
            "# comment",
            "'' 'comment' ''"
          ],
          "correct_idx": 2
        },
        {
          "id": 23,
          "title": "Print output",
          "author": "printly",
          "author_pfp_emoji": "üñ®Ô∏è",
          "topic": 0,
          "section": 1,
          "likes": 143,
          "background": "linear-gradient(135deg, #89f7fe 0%, #66a6ff 100%)",
          "comments": [
            {
              "id": 24,
              "author": "fmt_king",
              "pfp_emoji": "üéØ",
              "likes": 21,
              "content": "f-strings >>> old style. Pretty and fast."
            },
            {
              "id": 25,
              "author": "newb_alert",
              "pfp_emoji": "üôã‚Äç‚ôÇÔ∏è",
              "likes": 5,
              "content": "Wait is print a function or statement? (it's a function in Py3)"
            },
            {
              "id": 26,
              "author": "sarcastic_sam",
              "pfp_emoji": "ü¶ñ",
              "likes": 2,
              "content": "print('hello world') ‚Äî the OG flex."
            }
          ],
          "question": "What will print(f\"{2+3} apples\") output?",
          "choices": [
            "2+3 apples",
            "5 apples",
            "{2+3} apples",
            "Error"
          ],
          "correct_idx": 1
        },
        {
          "id": 27,
          "title": "Variables and assignment",
          "author": "assign_master",
          "author_pfp_emoji": "üîÅ",
          "topic": 0,
          "section": 2,
          "likes": 67,
          "background": "linear-gradient(135deg, #cfd9df 0%, #e2ebf0 100%)",
          "comments": [
            {
              "id": 28,
              "author": "mutable_mel",
              "pfp_emoji": "üß†",
              "likes": 9,
              "content": "Variables are labels, not boxes that hold things physically."
            },
            {
              "id": 29,
              "author": "typo_trek",
              "pfp_emoji": "‚ö†Ô∏è",
              "likes": 1,
              "content": "Don't start names with numbers. Python throws a tantrum."
            },
            {
              "id": 30,
              "author": "eggplant_emoji",
              "pfp_emoji": "üçÜ",
              "likes": 0,
              "content": "u can reassign variables like you're reshuffling a playlist."
            }
          ],
          "question": "After running x = 5; x = x + 2; what is x?",
          "choices": [
            "5",
            "2",
            "7",
            "x + 2"
          ],
          "correct_idx": 2
        },
        {
          "id": 31,
          "title": "Math precedence",
          "author": "op_guru",
          "author_pfp_emoji": "‚ûó",
          "topic": 0,
          "section": 3,
          "likes": 58,
          "background": "linear-gradient(135deg, #f093fb 0%, #f5576c 100%)",
          "comments": [
            {
              "id": 32,
              "author": "order_of_ops",
              "pfp_emoji": "üìê",
              "likes": 11,
              "content": "PEMDAS still applies. Exponents first, then mult/div, then add/sub."
            },
            {
              "id": 33,
              "author": "lol_math",
              "pfp_emoji": "üî¢",
              "likes": 2,
              "content": "Use // for floor division if you want integer vibes."
            },
            {
              "id": 34,
              "author": "percent_princess",
              "pfp_emoji": "üéØ",
              "likes": 1,
              "content": "Reminder: % is remainder, not modulo-magic (well it is modulo)."
            }
          ],
          "question": "What is the result of 3 + 4 * 2 ** 2?",
          "choices": [
            "14",
            "28",
            "11",
            "20"
          ],
          "correct_idx": 0
        },
        {
          "id": 35,
          "title": "If/Else branching",
          "author": "branch_boss",
          "author_pfp_emoji": "üåø",
          "topic": 0,
          "section": 4,
          "likes": 176,
          "background": "linear-gradient(135deg, #a8edea 0%, #fed6e3 100%)",
          "comments": [
            {
              "id": 36,
              "author": "truthy_trina",
              "pfp_emoji": "‚ú®",
              "likes": 16,
              "content": "Remember: empty lists/0/'' are falsy in if checks."
            },
            {
              "id": 37,
              "author": "drama_queen",
              "pfp_emoji": "üé≠",
              "likes": 4,
              "content": "elif saves you from nested hell. Thank you, Python."
            },
            {
              "id": 38,
              "author": "keyboard_k",
              "pfp_emoji": "‚å®Ô∏è",
              "likes": 2,
              "content": "Indentation > braces. Don't skip it unless chaos is your aesthetic."
            }
          ],
          "question": "What gets printed by: if []: print('yes') else: print('no')?",
          "choices": [
            "yes",
            "no",
            "[]",
            "Error"
          ],
          "correct_idx": 1
        },
        {
          "id": 39,
          "title": "Function returns",
          "author": "fn_factory",
          "author_pfp_emoji": "üß©",
          "topic": 0,
          "section": 5,
          "likes": 210,
          "background": "linear-gradient(135deg, #96fbc4 0%, #f9f586 100%)",
          "comments": [
            {
              "id": 40,
              "author": "return_of_king",
              "pfp_emoji": "üîô",
              "likes": 22,
              "content": "If no return, function returns None ‚Äî silent but deadly."
            },
            {
              "id": 41,
              "author": "param_pam",
              "pfp_emoji": "üéõÔ∏è",
              "likes": 8,
              "content": "Default args are evaluated at def-time. Mutable defaults = traps."
            },
            {
              "id": 42,
              "author": "skater_g",
              "pfp_emoji": "üõπ",
              "likes": 3,
              "content": "pls pass arguments in right order unless you're into chaos."
            }
          ],
          "question": "What does this function return? def f(a): return a * 2; f(3)",
          "choices": [
            "6",
            "f(3)",
            "None",
            "Error"
          ],
          "correct_idx": 0
        }
      ],
      "reels": [
        {
          "id": 43,
          "title": "If/Else: drama in 12s",
          "author": "branch_boss",
          "author_pfp_emoji": "üåø",
          "topic": 0,
          "section": 4,
          "likes": 890,
          "background": "linear-gradient(135deg, #ff9a9e 0%, #fecfef 100%)",
          "comments": [
            {
              "id": 44,
              "author": "short_and_snappy",
              "pfp_emoji": "‚ö°",
              "likes": 55,
              "content": "This actually made me laugh and learn. 10/10"
            },
            {
              "id": 45,
              "author": "misunderstood_if",
              "pfp_emoji": "üòµ",
              "likes": 9,
              "content": "Wait but what about chained comparisons? explain pls"
            },
            {
              "id": 46,
              "author": "random_meme",
              "pfp_emoji": "ü¶Ñ",
              "likes": 3,
              "content": "That skateboard cameo owned the plot twist üòÇ"
            }
          ],
          "video_prompt": "12s fast-cut comedic explainer. Scene plan: (0-2s) quick title card: 'If/Else: choosing your fate' with glitch sound. (2-6s) Two characters argue: Person A (yells) 'Is this true?!' Person B (deadpan) checks code on laptop and says 'if True: do this' ‚Äî show a snippet: if x > 10:\\n  print('big')\\nelif x == 10:\\n  print('just right')\\nelse:\\n  print('small'). (6-9s) Quick visual: a skateboarder rolls through the shot, tosses a rubber duck that lands next to the laptop ‚Äî zoom on duck labeled 'truthy/falsy'. Voiceover lines: 'Use elif to avoid nested drama. Empty stuff is falsy.' (9-12s) End with a silly reveal: the duck wears a tiny if-statement cape and says 'elif saves lives' with confetti and a one-sentence caption overlay: 'Truthy/falsy, elif, else ‚Äî choose wisely.' Quick visual cuts show code highlights: comparisons (>, ==), and the empty list turning into 'False'. Energetic indie-pop bed, snappy captions, playful acting, lots of jump cuts. Include close-ups of code and callouts like 'no braces, just vibes'. Keep the tone ridiculous and memorable; include short caption frames for the key rules.",
          "video_id": "video_68f5120d62008190ae0e9850c3d942aa05a61ae774a9f770",
          "video_status": "success",
          "video_file": "video_68f5120d62008190ae0e9850c3d942aa05a61ae774a9f770.mp4"
        },
        {
          "id": 47,
          "title": "Functions: returns & defaults (12s chaos)",
          "author": "fn_factory",
          "author_pfp_emoji": "üß©",
          "topic": 0,
          "section": 5,
          "likes": 772,
          "background": "linear-gradient(135deg, #a1c4fd 0%, #c2e9fb 100%)",
          "comments": [
            {
              "id": 48,
              "author": "param_pam",
              "pfp_emoji": "üéõÔ∏è",
              "likes": 31,
              "content": "The 'mutable default' bit had me screaming irl lol"
            },
            {
              "id": 49,
              "author": "helpful_hank",
              "pfp_emoji": "üßØ",
              "likes": 12,
              "content": "Remember: def f(x=[]) is evaluated once. Use None to be safe."
            },
            {
              "id": 50,
              "author": "skate_nate",
              "pfp_emoji": "üõπ",
              "likes": 2,
              "content": "there's a skateboard again. are they part of the function??"
            }
          ],
          "video_prompt": "12-second absurdist demo. Scenes: (0-2s) title flash: 'Functions IRL'. (2-5s) Two friends (one holding a clipboard) demonstrate: Friend 1: 'def greet(name):' Friend 2 shouts 'return f\"hey {name}\"' ‚Äî quick overlay shows code. (5-8s) Sketch gag: a skateboarder zooms by and leaves a pizza slice representing a default argument; the pizza slice gets reused ‚Äî voiceover: 'Defaults are set at def-time ‚Äî mutable defaults stick around.' Show code: def add(item, bag=[]): bag.append(item); return bag. Then show second call accumulating items. (8-11s) Fix tip: show replacement pattern def add(item, bag=None): if bag is None: bag = [] ‚Äî then it works. (11-12s) End card: 'Return things. Don't forget them. None is not an apology.' Use fast cuts, comedic timing, clear code overlays, and upbeat trap-pop music. Include quick text callouts: 'def', 'return', 'params', 'mutable default trap'.",
          "video_id": "video_68f5120f06848193b2e7b5401b6dbd3d0a769c7a2d9c4b78",
          "video_status": "success",
          "video_file": "video_68f5120f06848193b2e7b5401b6dbd3d0a769c7a2d9c4b78.mp4"
        }
      ],
      "posts": [
        {
          "id": 1,
          "title": "Comments: why and how",
          "author": "py_snack",
          "author_pfp_emoji": "üêç",
          "topic": 0,
          "section": 0,
          "likes": 312,
          "background": "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
          "comments": [
            {
              "id": 2,
              "author": "docqueen",
              "pfp_emoji": "üìö",
              "likes": 44,
              "content": "Use # for short notes and triple quotes for docstrings that explain functions."
            },
            {
              "id": 3,
              "author": "meme_logic",
              "pfp_emoji": "ü§°",
              "likes": 7,
              "content": "Comment your code so future-you doesn't cry at 3am."
            },
            {
              "id": 4,
              "author": "confused_cat",
              "pfp_emoji": "üê±",
              "likes": 2,
              "content": "Are multiline strings comments? Kinda but they are actual strings if left in code."
            }
          ],
          "slides": [
            {
              "icon": "üí¨",
              "content": "Single-line comment: start with # ‚Äî ignored by Python at runtime."
            },
            {
              "icon": "üìú",
              "content": "Docstring: triple quotes right under def/class to describe behavior and parameters."
            },
            {
              "icon": "‚ö†Ô∏è",
              "content": "Tip: docstrings are accessible via help() and __doc__ ‚Äî they're real objects."
            },
            {
              "icon": "üßº",
              "content": "Keep comments short and relevant: explain why, not what (the code shows what)."
            }
          ]
        },
        {
          "id": 5,
          "title": "Printing & formatting",
          "author": "printly",
          "author_pfp_emoji": "üñ®Ô∏è",
          "topic": 0,
          "section": 1,
          "likes": 480,
          "background": "linear-gradient(135deg, #43cea2 0%, #185a9d 100%)",
          "comments": [
            {
              "id": 6,
              "author": "fmt_king",
              "pfp_emoji": "üéØ",
              "likes": 54,
              "content": "Use f-strings: f\"Hello, {name}!\" ‚Äî readable and concise."
            },
            {
              "id": 7,
              "author": "old_school",
              "pfp_emoji": "üï∞Ô∏è",
              "likes": 6,
              "content": "You can still use format() and %, but f-strings are nicer in Py3.6+."
            },
            {
              "id": 8,
              "author": "noob",
              "pfp_emoji": "üôà",
              "likes": 3,
              "content": "print('a', 'b') adds a space by default ‚Äî use end='' to avoid newline."
            }
          ],
          "slides": [
            {
              "icon": "üñ®Ô∏è",
              "content": "Basic: print('hello world') prints to stdout with newline."
            },
            {
              "icon": "‚ú®",
              "content": "F-strings: name = 'Ada'; print(f'Hi {name}') ‚Äî expressions allowed inside {}."
            },
            {
              "icon": "üîó",
              "content": "sep and end: print('a','b', sep='-', end='!') -> a-b!"
            },
            {
              "icon": "üõ†Ô∏è",
              "content": "Debugging trick: print(variable, type(variable)) to inspect values while coding."
            }
          ]
        },
        {
          "id": 9,
          "title": "Variables: names & assignment",
          "author": "assign_master",
          "author_pfp_emoji": "üîÅ",
          "topic": 0,
          "section": 2,
          "likes": 254,
          "background": "linear-gradient(135deg, #f6d365 0%, #fda085 100%)",
          "comments": [
            {
              "id": 10,
              "author": "mutable_mel",
              "pfp_emoji": "üß†",
              "likes": 20,
              "content": "Variables are references. Assigning copies references for mutable objects."
            },
            {
              "id": 11,
              "author": "naming_ninja",
              "pfp_emoji": "ü™ì",
              "likes": 8,
              "content": "Choose clear names: total_price > x. Readability matters."
            },
            {
              "id": 12,
              "author": "typo_trek",
              "pfp_emoji": "‚ö†Ô∏è",
              "likes": 1,
              "content": "Syntax error if name starts with digit. Also avoid reserved keywords."
            }
          ],
          "slides": [
            {
              "icon": "üè∑Ô∏è",
              "content": "Assignment: x = 42 ‚Äî binds the name x to the value 42."
            },
            {
              "icon": "üîÅ",
              "content": "Multiple assign: a, b = 1, 2 or x = y = 0 for chaining."
            },
            {
              "icon": "üìõ",
              "content": "Naming: letters, digits, underscores; can't start with digit; be descriptive."
            },
            {
              "icon": "üß©",
              "content": "Mutable vs immutable: lists change in place, ints/tuples are immutable."
            }
          ]
        },
        {
          "id": 13,
          "title": "Math operators: the essentials",
          "author": "op_guru",
          "author_pfp_emoji": "‚ûó",
          "topic": 0,
          "section": 3,
          "likes": 199,
          "background": "linear-gradient(135deg, #f093fb 0%, #f5576c 100%)",
          "comments": [
            {
              "id": 14,
              "author": "order_of_ops",
              "pfp_emoji": "üìê",
              "likes": 17,
              "content": "Remember precedence: ** then * / // % then + -."
            },
            {
              "id": 15,
              "author": "int_vs_float",
              "pfp_emoji": "üî¢",
              "likes": 6,
              "content": "Use // for floor division if you want ints; / returns float."
            },
            {
              "id": 16,
              "author": "lil_memer",
              "pfp_emoji": "ü¶ô",
              "likes": 2,
              "content": "Modulus is like 'leftovers' after sharing pizza üçï"
            }
          ],
          "slides": [
            {
              "icon": "‚ûï",
              "content": "+, -, *, / ‚Äî basic arithmetic, / returns float."
            },
            {
              "icon": "ü™Ñ",
              "content": "** exponent, // floor-division, % remainder."
            },
            {
              "icon": "‚öñÔ∏è",
              "content": "Order of operations applies; use parentheses to force order."
            },
            {
              "icon": "üß™",
              "content": "Casting: int(3.7) -> 3, float(2) -> 2.0 when you need specific types."
            }
          ]
        },
        {
          "id": 17,
          "title": "If / Elif / Else: branching",
          "author": "branch_boss",
          "author_pfp_emoji": "üåø",
          "topic": 0,
          "section": 4,
          "likes": 421,
          "background": "linear-gradient(135deg, #a8edea 0%, #fed6e3 100%)",
          "comments": [
            {
              "id": 18,
              "author": "truthy_trina",
              "pfp_emoji": "‚ú®",
              "likes": 34,
              "content": "Truthy/falsy gotchas: 0, '', [], {}, None are falsy."
            },
            {
              "id": 51,
              "author": "nested_nerd",
              "pfp_emoji": "üåÄ",
              "likes": 6,
              "content": "Use early returns or elif to avoid deep nesting."
            },
            {
              "id": 52,
              "author": "lol_branches",
              "pfp_emoji": "üå≥",
              "likes": 2,
              "content": "If your nested tree looks like Jumanji, refactor pls."
            }
          ],
          "slides": [
            {
              "icon": "üîÄ",
              "content": "Basic: if condition: do_this  ‚Äî condition must be truthy to run block."
            },
            {
              "icon": "üß≠",
              "content": "elif chains multiple checks; only the first true branch runs."
            },
            {
              "icon": "üõ°Ô∏è",
              "content": "else runs when previous conditions are false ‚Äî acts as fallback."
            },
            {
              "icon": "ü§î",
              "content": "Compare with ==, !=, >, <, >=, <= and use 'and/or/not' for combos."
            }
          ]
        },
        {
          "id": 53,
          "title": "Functions: defs, params, returns",
          "author": "fn_factory",
          "author_pfp_emoji": "üß©",
          "topic": 0,
          "section": 5,
          "likes": 632,
          "background": "linear-gradient(135deg, #96fbc4 0%, #f9f586 100%)",
          "comments": [
            {
              "id": 54,
              "author": "return_of_king",
              "pfp_emoji": "üîô",
              "likes": 45,
              "content": "Don't forget return. Without it you get None and existential crisis."
            },
            {
              "id": 55,
              "author": "param_pam",
              "pfp_emoji": "üéõÔ∏è",
              "likes": 18,
              "content": "Keyword args make calls readable: func(x=1, y=2)."
            },
            {
              "id": 56,
              "author": "mutable_mel",
              "pfp_emoji": "üß†",
              "likes": 9,
              "content": "Mutable default params are a common trap ‚Äî use None check."
            }
          ],
          "slides": [
            {
              "icon": "üß≠",
              "content": "Define: def name(params): body ‚Äî defines reusable behavior."
            },
            {
              "icon": "üéÅ",
              "content": "Parameters: positional and keyword; default values allowed."
            },
            {
              "icon": "üîô",
              "content": "Return: send value back with return. No return -> returns None."
            },
            {
              "icon": "‚ö†Ô∏è",
              "content": "Mutable default trap: def f(a, L=[]): ... ‚Äî prefer None and set inside."
            }
          ]
        }
      ],
      "images": [
        {
          "id": 57,
          "title": "If/Else flow diagram",
          "author": "visual_viv",
          "author_pfp_emoji": "üé®",
          "topic": 0,
          "section": 4,
          "likes": 88,
          "background": "linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%)",
          "comments": [
            {
              "id": 58,
              "author": "flow_fan",
              "pfp_emoji": "üó∫Ô∏è",
              "likes": 6,
              "content": "This flowchart makes branching so much clearer."
            },
            {
              "id": 59,
              "author": "nitpicker",
              "pfp_emoji": "üîç",
              "likes": 1,
              "content": "Add a note about truthy/falsy for the condition nodes."
            }
          ],
          "image_prompt": "Simple clean flowchart diagram showing an if/elif/else decision flow. Start node labeled 'condition', arrow to 'if True' block, then an elif node and else fallback. Use flat pastel colors and clear arrows, minimal text, no code screenshots. Emphasize first-true-branch behavior.",
          "description": "A clear flowchart illustrating an if -> elif -> else decision path with arrows showing only the first matching branch executes.",
          "caption": "If/elif/else executes the first true branch; else is a fallback. Use flowcharts to plan branching logic.",
          "file": "22e05d20-bf1e-41b9-8aac-10f5ec689978.png"
        },
        {
          "id": 60,
          "title": "Function call diagram",
          "author": "visual_viv",
          "author_pfp_emoji": "üé®",
          "topic": 0,
          "section": 5,
          "likes": 104,
          "background": "linear-gradient(135deg, #e0c3fc 0%, #8ec5fc 100%)",
          "comments": [
            {
              "id": 61,
              "author": "call_stack_carl",
              "pfp_emoji": "üß†",
              "likes": 8,
              "content": "Nice to see how args move into params and returns come back."
            },
            {
              "id": 62,
              "author": "who_me",
              "pfp_emoji": "ü§∑",
              "likes": 2,
              "content": "Can this show default arg creation too? would be üî•"
            }
          ],
          "image_prompt": "Minimal diagram showing a function definition box, an arrow from caller with arguments to the function, and arrow back with return value. Use bright colors, no text inside shapes except labels 'caller', 'function', 'return'. Flat cartoon style, high contrast.",
          "description": "Diagram showing a caller passing arguments into a function box and the function returning a value back to the caller.",
          "caption": "Functions take inputs (params) and return outputs. If no return is given, the function returns None.",
          "file": "026424d5-24db-4272-9227-bd9867c6f698.png"
        },
        {
          "id": 63,
          "title": "Code meme: pizza defaults",
          "author": "meme_logic",
          "author_pfp_emoji": "ü§°",
          "topic": 0,
          "section": 5,
          "likes": 302,
          "background": "linear-gradient(135deg, #fddb92 0%, #d1fdff 100%)",
          "comments": [
            {
              "id": 64,
              "author": "param_pam",
              "pfp_emoji": "üéõÔ∏è",
              "likes": 28,
              "content": "Mutable default meme but make it pizza. Accurate and hilarious."
            },
            {
              "id": 65,
              "author": "random_meme",
              "pfp_emoji": "ü¶Ñ",
              "likes": 6,
              "content": "This is why I love code memes. Teach and roast at once."
            }
          ],
          "image_prompt": "A humorous photo-style image: a stack of pizzas labeled as 'default list' being reused across function calls. Cartoon overlay, bright colors, no readable code text. Emphasize pizza slice being added each call.",
          "description": "A funny illustration of a pizza stack representing a mutable default list being reused across calls.",
          "caption": "Mutable defaults retain changes between calls. Use None as a sentinel to create fresh defaults inside the function.",
          "file": "ca0bbdaf-657a-461b-a244-079bdc16494c.png"
        }
      ]
    }
  ]
}